{"version":3,"file":"static/js/888.645fa342.chunk.js","mappings":"8PACA,EAA0B,8BAA1B,EAAwE,oCAAxE,EAAmH,2BAAnH,EAAqJ,2B,SC0FrJ,EA7EqB,WAAO,IAAD,QACzB,GAA4BA,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MAiBjB,IAdAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAW,mCAAG,WAAMC,GAAN,kGAEOC,EAAAA,EAAAA,IAAA,6CACiBD,EADjB,6DAFP,gBAERE,EAFQ,EAERA,KAGRT,EAAUS,GALM,gDAOhBC,QAAQC,IAAR,MAPgB,yDAAH,sDAUjBL,EAAYL,EACb,GAAE,CAACA,IAEW,OAAXF,EAAJ,CAIA,IAAQa,EAAuDb,EAAvDa,MAAOC,EAAgDd,EAAhDc,SAAUC,EAAsCf,EAAtCe,OAAQC,EAA8BhB,EAA9BgB,YAAaC,EAAiBjB,EAAjBiB,aAExCC,EAAaH,EAAOI,KAAI,YAAmB,IAAhBC,EAAe,EAAfA,KAAe,EAATZ,GAErC,MADU,UAAMY,EAAN,IAEX,IAEKC,GAAsC,GAAfJ,GAAmBK,UAChD,OACE,iCACE,SAAC,KAAD,CAAMC,GAAE,oBAAEnB,EAASoB,aAAX,aAAE,EAAgBC,YAAlB,QAA0B,SAAUC,UAAWC,EAAvD,mBAGA,4BACE,gBAAKC,IAxCa,kCAwCYZ,EAAaa,IAAI,SAASC,OAAO,SAC/D,4BACE,0BAAKjB,EAAL,QACA,wCAAgBQ,EAAsB,IAAtC,QACA,sCACA,uBAAIP,KACJ,oCACA,uBAAII,WAGR,4BACE,gBAAIQ,UAAWC,EAAf,WACE,SAAC,KAAD,CACEJ,GAAG,QACHC,MAAO,CAAEC,KAAI,UAAErB,EAASoB,aAAX,aAAE,EAAgBC,MAC/BC,UAAW,qBAAGK,SACDJ,EAAoBA,CADtB,EAHb,oBASA,SAAC,KAAD,CACEJ,GAAG,UACHC,MAAO,CAAEC,KAAI,UAAErB,EAASoB,aAAX,aAAE,EAAgBC,MAC/BC,UAAW,qBAAGK,SACDJ,EAAoBA,CADtB,EAHb,yBAUF,SAAC,EAAAK,SAAD,CAAUC,UAAU,wCAApB,UACE,SAAC,KAAD,WAhDP,CAqDF,C","sources":["webpack://react-homework-template/./src/components/MovieDetails/MovieDetails.module.css?9ca9","components/MovieDetails/MovieDetails.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"navLink\":\"MovieDetails_navLink__rUGTm\",\"navLinkActive\":\"MovieDetails_navLinkActive__t-zv+\",\"list\":\"MovieDetails_list__y5Rs9\",\"back\":\"MovieDetails_back__X8E6B\"};","import PropTypes from 'prop-types';\nimport axios from 'axios';\nimport {\n  useParams,\n  Link,\n  Outlet,\n  useLocation,\n  NavLink,\n} from 'react-router-dom';\nimport { useState, useEffect, Suspense } from 'react';\nimport css from './MovieDetails.module.css';\n\nconst MOVIE_POSTER_LINK = 'https://image.tmdb.org/t/p/w500';\n\nconst MovieDetails = () => {\n  const [movies, setMovies] = useState(null);\n  const { movieId } = useParams();\n  const location = useLocation();\n  \n\n  useEffect(() => {\n    const hendleFetch = async id => {\n      try {\n        const { data } = await axios.get(\n          `https://api.themoviedb.org/3/movie/${id}?api_key=30c2328b2ce92a2dec1b35516df54c65&language=en-US`\n        );\n        setMovies(data);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    hendleFetch(movieId);\n  }, [movieId]);\n\n  if (movies === null) {\n    return;\n  }\n\n  const { title, overview, genres, poster_path, vote_average } = movies;\n\n  const genresPars = genres.map(({ name, id }) => {\n    const gens = `${name} `;\n    return gens;\n  });\n\n  const userScoreNormalized = (vote_average * 10).toFixed();\n  return (\n    <>\n      <Link to={location.state?.from ?? '/movie'} className={css.back}>\n        Back\n      </Link>\n      <div>\n        <img src={MOVIE_POSTER_LINK + poster_path} alt=\"Poster\" height=\"500\" />\n        <div>\n          <h1>{title}:</h1>\n          <p>User Score: {userScoreNormalized + '%'} </p>\n          <h2>Overview</h2>\n          <p>{overview}</p>\n          <h2>Genres</h2>\n          <p>{genresPars}</p>\n        </div>\n      </div>\n      <div>\n        <ul className={css.list}>\n          <NavLink\n            to=\"casts\"\n            state={{ from: location.state?.from }}\n            className={({ isActive }) =>\n              isActive ? css.navLinkActive : css.navLink\n            }\n          >\n            Casts\n          </NavLink>\n          <NavLink\n            to=\"reviews\"\n            state={{ from: location.state?.from }}\n            className={({ isActive }) =>\n              isActive ? css.navLinkActive : css.navLink\n            }\n          >\n            Reviews\n          </NavLink>\n        </ul>\n        <Suspense fallback={<div>Loading...</div>}>\n          <Outlet />\n        </Suspense>\n      </div>\n    </>\n  );\n};\n\nexport default MovieDetails;\n\nMovieDetails.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      poster_path: PropTypes.string.isRequired,\n      overview: PropTypes.string.isRequired,\n      vote_average: PropTypes.string.isRequired,\n      genres: PropTypes.arrayOf(\n        PropTypes.exact({\n          id: PropTypes.string.isRequired,\n          name: PropTypes.string.isRequired,\n        })\n      ),\n    })\n  ),\n};\n"],"names":["useState","movies","setMovies","movieId","useParams","location","useLocation","useEffect","hendleFetch","id","axios","data","console","log","title","overview","genres","poster_path","vote_average","genresPars","map","name","userScoreNormalized","toFixed","to","state","from","className","css","src","alt","height","isActive","Suspense","fallback"],"sourceRoot":""}